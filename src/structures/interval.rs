use crate::structures::Primes;
use crate::fermat::{FInteger,FIterator};
use crate::{HashTable,CompVector};
use crate::filter::WeakFermat;
use crate::search::thread_count;
use crate::search::unary_ht_par;
use crate::search::hash_search;
use crate::primes::SMALL_PRIMES;
use crate::car::MRC_18;
use crate::result::FResult;
use crate::fermat::NTCore;


use std::sync::Arc;
use std::sync::atomic::{AtomicU64, AtomicUsize,AtomicBool,Ordering};
use std::fs::File;
use std::io::Write;
use crate::compconfig::{Search,AUTO_FLAG,MEMORY_MAX,UTF8_FLAG};

#[derive(Clone)]
pub struct Interval<T: FInteger>{
        inf: T,
        sup: T,
       mode: Search,
   }

impl<T:FInteger> Interval<T>{
   
   pub fn new(inf: T, sup: T) -> Self{
	       let (new_inf, new_sup) = inf.min_max(sup);
		   
           Self{inf: new_inf,sup: new_sup,mode: Search::Deterministic}
       }

   pub fn set_weak_heuristic(&mut self){
           self.mode=Search::WeakHeuristic;
       }
   
   pub fn set_strong_heuristic(&mut self){
	       self.mode = Search::StrongHeuristic;
       }
   
   pub fn set_deterministic(&mut self){
	       self.mode = Search::Deterministic;
       }
       
       
   /// Searches for base^(p-1) mod p*p = 1 returning all p less than sqrt(Max)
	pub fn fermat_quotient(&self, base: u64) -> Vec<u64>{
	  
	  let p_bound = self.sup.isqrt().to_u64() as usize;
	  // Check if primes are already written, if yes then restore, if no generate and write them
	  let plist = Primes::generate_or_restore(p_bound);
	  
	  // Check for the case of 2
	  let mut res = vec![];
	  
	  // Check for the case of 2
	  // base mod 4
	 // let b = *base&3;
	  // base^3 mod 4 
     // if (b*b*b)&3 == 1{
     //     veccy.push(2);
     // }

	  // Loop over all generated primes and store p if base^p-1 = 1 mod p*p
       for p in plist.iter(){
         // Check if base^(p-1) mod p^2 = 1
         if p.sqr_fermat(base){
           res.push(p)
        }
       }
      return res
   }    
       
   /// Fermat quotients to bases of iterator
   /// This function writes to Standard Out, bases are likely to be out of sequence
   pub fn fq_sequence<F : FIterator<u64>>(&self,iter : F) -> () {
      let x = iter.to_vector();
    
      let p_bound = self.sup.isqrt().to_u64() as usize;
      
      let sup = x.len();
	  // Check if primes are already written, if yes then restore, if no generate and write them
	  let plist = Primes::generate_or_restore(p_bound);
	  
	  let tc = thread_count();
	  let mut thread_vec : Vec<std::thread::JoinHandle::<()>> = Vec::new();
          let zero = AtomicU64::new(0u64);
          let base = Arc::new(AtomicUsize::new(usize::MAX));
          let b_vec: Arc<Vec<u64>> = Arc::new(x.clone());
          let p_vec : Arc<Primes> = Arc::new(plist.clone());
         
	  for t in 0..tc{
	     
        let b_i = Arc::clone(&base);
        let pv_i = Arc::clone(&p_vec);
        let bv_i = Arc::clone(&b_vec);
        
        thread_vec.push(std::thread::spawn(move || 'search: loop {
            let c_idx = b_i.load(Ordering::SeqCst).wrapping_add(1);

            b_i.store(c_idx, Ordering::SeqCst);

            if c_idx >= sup {
                break 'search;
            }
         
            let c_base = unsafe { bv_i.get_unchecked(c_idx) };

            let mut veccy : Vec<u64> = vec![*c_base];
            
            // Case where 2*2
           // let b = *c_base&3;
           // if (b*b*b)&3 == 1{
           //    veccy.push(2);
           // }
	    for p in pv_i.iter(){
           if p.sqr_fermat(*c_base){
             veccy.push(p)
           }   
          }
         println!("{:?}",veccy);
         
	}
        ));
    }
    
    for handle in thread_vec {
        handle.join().unwrap();
    }
    
    }
        
	   
	 
	   /// Calculates the set of composites generated by the heuristic
       /// # None	   
	   /// Deterministic automatically fails, as this is simply all composites 
	pub fn compute_heuristic(&self, locale: Option<&str>) -> FResult<CompVector<T>>{
		
		if self.mode == Search::Deterministic{
		   return FResult::NotSupported;
		}
		
		let p_bound = self.sup.isqrt().to_u64() as usize;
	   	let plist = Primes::generate_or_restore(p_bound);
	   	
	   	
	   	match locale {
	   	   // Write all composites to file
	   	   Some(x) => {
	   	       let mut outfile = File::create_new(x).unwrap();
	   	       let mut out = std::io::BufWriter::new(outfile.try_clone().unwrap());
	   	       // Monier-Rabin Heuristic
	   	       for i in plist.iter(){
	   	       
	   	          let lhs = T::from_u64(i);
	   	          
	   	          for j in [3,4,6].iter(){
                  let rhs = lhs.even_complement(T::from_u64(*j));
       
                  if rhs.is_prime(){
                     let (prod,flag) = lhs.overflowing_mul(rhs);
                     // If multiplication overflowed or the prod exceeds the bound break loop
                     if flag  || !prod.is_bounded_by(T::ZERO,self.sup){
                       break;
                     }
                     
                     if prod.is_bounded_by(self.inf,self.sup){
                        out.write(&prod.to_bytes()[..]).unwrap();
                     }
                  }
                }
               } 
                
               for i in MRC_18{
                 if T::from_u64(i).is_bounded_by(self.inf,self.sup){
                  out.write(&T::from_u64(i).to_bytes()[..]).unwrap();
                 }
              }
            
                out.flush().unwrap();
                
              if self.mode == Search::StrongHeuristic{
                
                for i in plist.iter(){
                
                   let lhs = T::from_u64(i);
                   
	   	           for j in 2..32{
	   	           
                     let rhs = lhs.semi_k_complement(j);
       
                      if rhs.is_prime(){
                         let (prod,flag) = lhs.overflowing_mul(rhs);
                         
                          if flag || !prod.is_bounded_by(T::ZERO,self.sup){
                             break;
                          }
                          
                         if prod.is_bounded_by(self.inf,self.sup){
                           out.write(&prod.to_bytes()[..]).unwrap();
                         }
                       }
                  }
                }
                out.flush().unwrap();
              }
              return FResult::Value(CompVector::from_file_internal(outfile.try_clone().unwrap(),MEMORY_MAX,UTF8_FLAG,AUTO_FLAG));
    
	   	   } // End file write
	   	   
	   	   // Write all composites to volatile memory (i.e vector)
	   	   None => {
	   	      let mut ce = Vec::<T>::new();
	   	      
	   	      for i in plist.iter(){
	   	      
	   	          let lhs = T::from_u64(i);
	   	          
	   	        for j in [3,4,6].iter(){
                  let rhs = lhs.even_complement(T::from_u64(*j));
       
                  if rhs.is_prime(){
                     let (prod,flag) = lhs.overflowing_mul(rhs);
                     
                      if flag || !prod.is_bounded_by(T::ZERO,self.sup){
                       break;
                      }
                     
                     if prod.is_bounded_by(self.inf,self.sup){
                        ce.push(prod);
                     }
                  }
                }
                
               for i in MRC_18{
                 if T::from_u64(i).is_bounded_by(self.inf,self.sup){
                   ce.push(T::from_u64(i))
                 }
              }
              
              }
               if self.mode == Search::StrongHeuristic{
                
                for i in plist.iter(){
                
                   let lhs = T::from_u64(i);
                   
	   	           for j in 2..16{
	   	           
                     let rhs = lhs.semi_k_complement(j);
       
                      if rhs.is_prime(){
                         let (prod,flag) = lhs.overflowing_mul(rhs);
                         
                          if flag || !prod.is_bounded_by(T::ZERO,self.sup){
                             break;
                          }
                         
                         if prod.is_bounded_by(self.inf,self.sup) && !flag{
                           ce.push(prod);
                         }
                       }
                  }
                }
              }
              return FResult::Value(CompVector::from_vector(ce));
	   	   }
	} // end match
	
  } // end function
  
  /*
      Algorithm 
      
      Generate Heuristic within interval
      
      Calculate set of candidate bases 
      
      Split interval into sections by thread 
      
      Set the output array with element from vector
      
      Use is_prime to determine if element is valid
  */
  
	// FIXME return Insufficient Candidate giving index of value that failed
 pub fn to_hashtable(&self, dimen: Option<usize>, multiplier: Option<u32>,bound: Option<u64>) -> FResult<HashTable>{
      // Number of Bases to evaluate
     const STRIDE : usize = 400;
 
     let trial_div = |x: T, pf: &[u64]| -> bool{
        for i in pf{
          if x.is_multiple_of(*i){
             return false
          }
        }
        return true
     };
     
     let get_factor = |x: u64| -> Vec<u64>{
        let mut veccy = vec![];
        for i in SMALL_PRIMES{
           if x.is_multiple_of(i){
             veccy.push(i);
           }
        }
        veccy
     };
 
     let mut x = self.clone();
     x.set_strong_heuristic();
     // FIXME handle error
     let mut ce = x.compute_heuristic(None).unwrap();
     
     
     let dim = if let Some(d) = dimen {
              d
            } else {
            (ce.len()/200).next_power_of_two()*2
        };
       
     let divisor = (32 - dim.trailing_zeros()) as usize;
     
     let ce2 = ce.to_vector();
     
     // If multiplier defined use it, otherwise calculate it
        let mul = if let Some(mx) = multiplier {
              mx
            } else {
            hash_search(&ce2, dim, 100000)
        };
             // If bound defined use it, otherwise set it as 65535
        let bnd = if let Some(bd) = bound {
              bd
            } else {
            65535
        };
        
     let baseset = if let FResult::Exhaustive(interim_base) =  unary_ht_par::<T,STRIDE>(ce2, dim, mul, bnd){
          interim_base
        } else {
          vec![]
        };
     // Set to NoCandidates
     if baseset.len()==0{
       return FResult::InsufficientCandidates(0usize);
     }
   
     let (inf,sup) = (self.inf,self.sup);
     let mut output = vec![];

     for _ in 0..dim {
         output.push(AtomicU64::new(0u64))
     }
     
      let tc = thread_count();
      
      let mut thread_vec: Vec<std::thread::JoinHandle<()>> = Vec::new();
       // Index Max is used for coding simplicity, getting the first 0 index is simply a wrapping addition
      let idx = Arc::new(AtomicUsize::new(usize::MAX));
       // Counterexample Arc
      let base_vec: Arc<Vec<u64>> = Arc::new(baseset);
       // Base output Arc
      let o_vec: Arc<Vec<AtomicU64>> = Arc::new(output);
       // Failure flag for inability to find sufficient base
      let flag: Arc<AtomicBool> = Arc::new(AtomicBool::new(false));

      
      for _ in 0..tc{
         
         // Copy of base idx
        let b_i = Arc::clone(&idx);
        // Copy of Baseset
        let be_i = Arc::clone(&base_vec);
        // Copy of base vector
        let ov_i = Arc::clone(&o_vec);
        //  Copy of Boolean flag indicating failure
        let f_i = Arc::clone(&flag);
        
        
        thread_vec.push(std::thread::spawn(move || {
            'search: loop {
                // Get current index and increment by the stride
                let mut c_idx = b_i.load(Ordering::SeqCst);
                
                if c_idx != usize::MAX{
                    c_idx = c_idx.wrapping_add(STRIDE);
                 }
                 
                 if c_idx == usize::MAX{
                    c_idx = 0usize
                 }
                
                
                // Store the current index for other threads to access
                b_i.store(c_idx, Ordering::SeqCst);
                
                // Get current flag state
                let failure = f_i.load(Ordering::SeqCst);
                // Current bucket the loop is evaluating
                let bucket = c_idx/STRIDE;
                // End search loop if all bases have been computed OR a base couldn't be found for a bucket
                if c_idx >= dim*STRIDE || failure {
                    break 'search;
                }
               
                let mut outer_flag = true;
                
               'base: for j in 0..STRIDE{
               
                 let c = unsafe { be_i.get_unchecked(c_idx+j) };
                 let base = c.clone();
                 let inner_plist = get_factor(base);
                // Collect composites into the bucket
                let mut inner_flag = true;
                 
                let mut i = inf;
                if i.is_even(){
                i.successor();
                }
                else{
                i.inc_by(2);
                }
                'inc : loop{
       
                  if !i.is_bounded_by(inf,sup){
                     break 'inc;
                  }
            
                    if i.hash_shift(divisor, mul) == bucket {
                       if trial_div(i,&inner_plist[..]){
                         if i.is_prime()!=i.sprp(T::from_u64(base)){
                            inner_flag = false;
                            break 'inc;
                          }
                        }
                    }
                    i.inc_by(2);
                    
                }
                // 
                 if inner_flag{
                   let d = unsafe { ov_i.get_unchecked(c_idx/STRIDE) };
                    d.store(base, Ordering::SeqCst);
                    outer_flag = false;
                   break 'base;
                 }
                } // end total base check
                
                // If no valid base found set failure flag 
                if outer_flag{
                  f_i.store(true,Ordering::SeqCst);
                }
            }
        }));
      }
      
      // Execute all threads
    for handle in thread_vec {
        handle.join().unwrap();
    }
	

    // If flag was set return None as the base search failed
    if Arc::try_unwrap(flag).unwrap().load(Ordering::SeqCst) {
        return FResult::ProofFailed;
    }
     
    let interim = Arc::try_unwrap(o_vec).unwrap();
	// Convert the vector of Arc bases to 64-bit bases
    let veccy = interim
            .iter()
            .map(|q| q.load(Ordering::SeqCst))
            .collect::<Vec<u64>>();
            
    FResult::Exhaustive(HashTable::new(veccy,dim,mul))       
 }
 
 
 
 fn  generate_ce(&self, locale: Option<&str>) -> FResult<CompVector<T>>{
 
 	if self.mode == Search::Deterministic{
		   return FResult::NotSupported;
		}
		
		let p_bound = self.sup.isqrt().to_u64() as usize;
	   	let plist = Primes::generate_or_restore(p_bound);
	   	
	   	
	   	match locale {
	   	   // Write all composites to file
	   	   Some(x) => {
	   	       let mut outfile = File::create_new(x).unwrap();
	   	       let mut out = std::io::BufWriter::new(outfile.try_clone().unwrap());
	   	       // Monier-Rabin Heuristic
	   	       for i in plist.iter(){
	   	       
	   	          let lhs = T::from_u64(i);
	   	          
	   	          for j in [3,4,6].iter(){
                  let rhs = lhs.even_complement(T::from_u64(*j));
       
                  if rhs.is_prime(){
                     let (prod,flag) = lhs.overflowing_mul(rhs);
                     // If multiplication overflowed or the prod exceeds the bound break loop
                     if flag  || !prod.is_bounded_by(T::ZERO,self.sup){
                       break;
                     }
                     
                     if prod.is_bounded_by(self.inf,self.sup){
                        out.write(&prod.to_bytes()[..]).unwrap();
                     }
                  }
                }
                
            }
            
             for i in MRC_18{
                 if T::from_u64(i).is_bounded_by(self.inf,self.sup){
                  out.write(&T::from_u64(i).to_bytes()[..]).unwrap();
                 }
              }
              
                out.flush().unwrap();
                
              if self.mode == Search::StrongHeuristic{
                
                for i in plist.iter(){
                
                   let lhs = T::from_u64(i);
                   
	   	           for j in 2..64{
	   	           
                     let rhs = lhs.semi_k_complement(j);
       
                      if rhs.is_prime(){
                         let (prod,flag) = lhs.overflowing_mul(rhs);
                         
                          if flag || !prod.is_bounded_by(T::ZERO,self.sup){
                             break;
                          }
                          
                         if prod.is_bounded_by(self.inf,self.sup){
                          
                           out.write(&prod.to_bytes()[..]).unwrap();
                         }
                       }
                  }
                }
                out.flush().unwrap();
              }
              return FResult::Value(CompVector::from_file_internal(outfile.try_clone().unwrap(),MEMORY_MAX,UTF8_FLAG,AUTO_FLAG));
    
	   	   } // End file write
	   	   
	   	   // Write all composites to volatile memory (i.e vector)
	   	   None => {
	   	      let mut ce = Vec::<T>::new();
	   	      
	   	      for i in plist.iter(){
	   	      
	   	          let lhs = T::from_u64(i);
	   	        for j in [3,4,6].iter(){
                  let rhs = lhs.even_complement(T::from_u64(*j));
       
                  if rhs.is_prime(){
                     let (prod,flag) = lhs.overflowing_mul(rhs);
                     
                      if flag || !prod.is_bounded_by(T::ZERO,self.sup){
                       break;
                      }
                     
                     if prod.is_bounded_by(self.inf,self.sup){
                        ce.push(prod);
                     }
                  }
                }
              
              }
              
              
               for i in MRC_18{
                 if T::from_u64(i).is_bounded_by(self.inf,self.sup){
                   ce.push(T::from_u64(i))
                 }
              }
              
               if self.mode == Search::StrongHeuristic{
                
                for i in plist.iter(){
                
                   let lhs = T::from_u64(i);
                   
	   	           for j in 2..64{
	   	           
                     let rhs = lhs.semi_k_complement(j);
       
                      if rhs.is_prime(){
                         let (prod,flag) = lhs.overflowing_mul(rhs);
                         
                          if flag || !prod.is_bounded_by(T::ZERO,self.sup){
                             break;
                          }
                         
                         if prod.is_bounded_by(self.inf,self.sup) && !flag{
                           ce.push(prod);
                         }
                       }
                  }
                }
              }
              return FResult::Value(CompVector::from_vector(ce));
	   	   }
	} // end match
	
 
 }
   
}


impl Interval<u64>{
	
    
    pub fn generate_fermat<T: WeakFermat>(&self) -> CompVector<u64> {
    
        let subproc = |start: u64, stop: u64| -> Vec<u64> {
            let mut veccy = Vec::new();
            for i in start..stop {
                if T::fermat(i) {
                    if !i.is_prime() {
                        veccy.push(i)
                    }
                }
            }
            return veccy;
        };
        let sup = self.sup as u64;
        let inf = self.inf as u64;
        let threadcount = thread_count();

        let mut threads = vec![];

        let stride = (sup - inf) / threadcount as u64;
        for i in 0..threadcount {
            threads.push(std::thread::spawn(move || {
                subproc(inf + (stride * i as u64), inf + stride * (i as u64 + 1))
            }))
        }

        let mut collector = vec![];

        for j in threads {
            collector.push(j.join().unwrap())
        }
        let res = collector.into_iter().flatten().collect::<Vec<u64>>();
      /*  
        match out{
          Some(x) => {
              res.write_binary(x);
              return Composite::from_file(x).unwrap();
              }
          None =>  Composite::from_vector(res),
    }
    */
    CompVector::<u64>::from_vector(res)
   }
  } 
   /*
   pub fn fermat_pseudos(&self,base: u64, out: Option<&str>) -> Composite<u64> {
    
        let subproc = |start: u64, stop: u64, b: u64| -> Vec<u64> {
            let mut veccy = Vec::new();
            for i in start..stop {
                if i.fermat(b) {
                    if !i.is_prime() {
                        veccy.push(i)
                    }
                }
            }
            return veccy;
        };
        let sup = self.sup as u64;
        let inf = self.inf as u64;
        let threadcount = thread_count();

        let mut threads = vec![];

        let stride = (sup - inf) / threadcount as u64;
        for i in 0..threadcount {
            threads.push(std::thread::spawn(move || {
                subproc(inf + (stride * i as u64), inf + stride * (i as u64 + 1),base)
            }))
        }

        let mut collector = vec![];

        for j in threads {
            collector.push(j.join().unwrap())
        }
        let res = collector.into_iter().flatten().collect::<Vec<u64>>();
        
        match out{
          Some(x) => {
              res.write_binary(x);
              return Composite::from_file(x).unwrap();
              }
          None =>  Composite::from_vector(res),
    }
   }
  
   //pub fn fermat_residue(&self, base: u64) -> CompVector
   
   // Generate the fermat pseudoprimes within the interval;
   //pub fn generate_pseudoprimes(&self, filename : Option<&str>) -> Composite<u64>{}
}
*/
